---
title: "In Class Exercises - Sorting and Filtering"
author: "Jenna Baer"
date: "`r format(Sys.time(), '%B %d, %Y')`"
format:
  html:
    self-contained: true
    toc: true
    toc-location: left
---

## Setup and Loading Data

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)

# Load the packages we'll need
# Remember, think of this like packing for our trip
# (We don't take the whole closet, only what we need)
library(tidyverse)
library(lubridate)
```

Run this line below load the data for this assignment. It will load a dataframe called "impeach," containing U.S. House Democrats and whether they supported the first impeachment of Pres. Trump, along with when they announced such support.

```{r}

impeach <- read_csv("https://docs.google.com/spreadsheets/d/e/2PACX-1vRh8d5JaDqBtByzNw2JZF3idaACobDhhk-p7chJoktA0HawELHFOvjQOqCpzGA4MGONvPlR7GASqW-K/pub?gid=1765341510&single=true&output=csv")


```

Let's see what we have:

```{r}

impeach


```

## Exercise Questions

*For the questions below, write your R code to return the requested records in the code chunk provided.*

1)  The column "for_impeachment" indicates whether the member has publicly called for an impeachment inquiry. Filter to return only the ones where the answer is NO. 
I remembered from the in class activity to use the filter function and apply it to the whole data set. After setting that up I filtered the for impeachment column because that is the variable of interest here.

```{r}

filter(impeach, for_impeachment == "NO")






```

2)  Filter to return only results where a member is both against impeachment, and comes from a district that President Trump won in 2016 (which is noted in the "p16winningparty" column). 

I decided to use the pipe function here because we're combining variables through the filter function. I set up the variable for Trump winning a district in 2016 to be equivalent to "R" because that meant a Republican won the district.
```{r}

impeach %>%
  filter(for_impeachment == "NO", p16winningparty == "R")



```

3)  Filter for only results where a member is against impeachment, comes from a district that President Trump won in 2016 (which is noted in the "p16winningparty" column), and also comes from a district that Mitt Romney won in 2012 ("p12winningparty").

I just added onto the pipe function using the same format as the previous question.

```{r}

impeach %>%
  filter(for_impeachment == "NO", p16winningparty == "R", p12winningparty == "R")



```

4)  Filter for only results from September 2019 where a member is a YES for impeachment.

I again knew to use the pipe and filter functions because we're narrowing the variables were interested in. I also figured it made the most sense to use the date_year and date_month variables independently because you didn't ask for the entire date/ specific day.
```{r}

impeach %>%
  filter(for_impeachment == "YES", date_year == 2019, date_month == 9)



```

5)  Filter for only results where a member is a YES for impeachment and is from a district where Clinton won more than 70 percent of the vote in 2016 (found in column "clinton_percent").

This question required me to think a bit critically. I continued to use the filter and pipe functions but in order to get the results from places where Clinton received over 70% of the vote, I decided to use the over function rather than the "==" we had previously used.
```{r}

impeach %>%
  filter(for_impeachment == "YES", clinton_percent > 70)



```

6)  Sort the entire dataframe based on the percentage of a district that has a bachelor's degree or higher ("pct_bachelors"), from lowest to highest.

I again used the pipe function to connect the data set with the variable we want to manipulate. By default the arrange function organized the data in ascending order which is why I just put arrange around the pct_bachelors variable.
```{r}

impeach %>%
  arrange((pct_bachelors))




```

7)  Sort the just those who are NO on impeachment based on the percentage of a district that has a bachelor's degree or higher ("pct_bachelors"), from lowest to highest.

I filtered for those who voted no on impeachment and organized these datapoints in ascending order based on their percent bachelors degree, using the filter, pipe, and arrange functions.
```{r}

impeach %>%
  filter (for_impeachment == "NO") %>%
  arrange(pct_bachelors)



```

8)  Sort the just those who are NO on impeachment based on the percentage of a district that has a bachelor's degree or higher ("pct_bachelors"), from lowest to highest.

Then filter those records by only those whose bachelor's percentage is below the national average (found in the "pct_bachelors_compared_to_national" column).

I used the pipe function to filter for members who voted "NO" on impeachment and represent districts that's percentage of bachelor's degrees are below the national average.
```{r}

impeach %>%
  filter (for_impeachment == "NO", pct_bachelors_compared_to_national == "BELOW") %>%
  arrange(pct_bachelors)
  




```

9)  Filter for only members from New Jersey who are NO on impeachment.

I used the pipe function to filter both for members who voted No on impeachment and were from New Jersey.
```{r}

impeach %>%
  filter(for_impeachment == "NO", state == "NJ")



```

10) Filter for those who were YES on impeachment, with a declared date prior to 2019. So only those with dates before 2019. Then sort those so that the highest Clinton vote percentages are at the top.

I used the pipe function to be able to both filter for people who voted yes for impeachment and had a declared date before 2019 and made sure to use the "<" so only years "less than" 2019 would be included. I also used the desc function to arrange the data in descending order based on percentage of the area that voted for Clinton.
```{r}

impeach %>%
  filter(for_impeachment == "YES", date_year < 2019) %>%
  arrange(desc(clinton_percent))



```
